name: Validate

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Minimum major Python version supported by the library
  # (bumped to the minimum version supported by github actions - see https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json )
  MIN_PYTHON_VERSION: 3.6.7
  POETRY_VERSION: 1.1.12

jobs:
  style-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ env.MIN_PYTHON_VERSION }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.MIN_PYTHON_VERSION }}
    - name: Update pip
      run: |
        python -m pip install --upgrade pip
    - name: Install Poetry
      uses: abatilo/actions-poetry@7044c9c69e0265717d52471f66033b8d0e2a69ff # v2.1.4
      with:
        poetry-version: ${{ env.POETRY_VERSION }}
    - name: Install Dependencies
      run: |
        poetry install
    - name: Check Formatting
      run: |
        poetry run black --check src tests

  test:
    name: Test (${{ matrix.extra-test-title }}Py${{ matrix.python-version }} ${{ matrix.os-family }} - XRay v${{ matrix.aws-xray-sdk-version }})
    runs-on: ${{ format('{0}-latest', matrix.os-family) }}
    strategy:
      # We use branch-dependent matrix inputs to reduce the amount of tests
      # that are run on PR's (every relevant combination is run when pushed
      # to `master`).
      #
      # The variants are produced inline as a (json) dictionary, indexed by
      # whether we are on a protected branch. Some notes about this technique:
      #   - The only fields available for variant lookup are those on the
      #     `github` context (see https://docs.github.com/en/actions/learn-github-actions/contexts#github-context)
      #   - Specifically, we can't simplify our code here by generating the
      #     lookup table as an environment variable in the top-level of this
      #     file, because that is not available here.
      #   - It has to be a single line within this file, or else the GitHub
      #     YAML parser will wreck the JSON somehow.
      #   - We need to encode the entire YAML value as a quoted string so that
      #     we can use colon's inside it, which means internal double quotes
      #     within the JSON string have to be escaped.
      matrix:
        os-family: "${{ fromJSON('{\"true\": [ \"ubuntu\", \"windows\", \"macos\" ], \"false\": [ \"ubuntu\" ]}')[github.ref_protected] }}"
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10"]
        aws-xray-sdk-version: "${{ fromJSON('{\"true\": [ \"2.6.0\", \"2.7.0\", \"2.8.0\", \"2.9.0\" ], \"false\": [ \"<existing>\" ]}')[github.ref_protected] }}"
        aiohttp-version: ["<existing>"]
        fastapi-version: ["<existing>"]
        include:
          - extra-test-title: "FastAPI v0.47: "
            os-family: ubuntu
            python-version: "3.10"
            aws-xray-sdk-version: "<existing>"
            aiohttp-version: "<existing>"
            fastapi-version: "0.47.1"
          - extra-test-title: "aiohttp v3.0.9: "
            os-family: ubuntu
            python-version: "3.6"
            aws-xray-sdk-version: "2.6.0"
            aiohttp-version: "3.0.9"
            fastapi-version: "<existing>"

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Update pip
      run: |
        python -m pip install --upgrade pip
    - name: Install Poetry
      uses: abatilo/actions-poetry@7044c9c69e0265717d52471f66033b8d0e2a69ff # v2.1.4
      with:
        poetry-version: ${{ env.POETRY_VERSION }}
    - name: Install Standard Dependencies
      run: |
        poetry install
    - name: Override Dependencies For Backward Compatibility Testing (Unix)
      if: matrix.os-family != 'windows'
      run: |
        if [ "${{ matrix.aws-xray-sdk-version }}" != "<existing>" ]; then
          poetry add aws_xray_sdk="${{ matrix.aws-xray-sdk-version }}"
        fi
        if [ "${{ matrix.fastapi-version }}" != "<existing>" ]; then
          poetry add --dev fastapi="${{ matrix.fastapi-version }}"
        fi
        if [ "${{ matrix.aiohttp-version }}" != "<existing>" ]; then
          poetry add --dev aiohttp="${{ matrix.aiohttp-version }}"
        fi
    - name: Override Dependencies For Backward Compatibility Testing (Windows)
      if: matrix.os-family == 'windows'
      run: |
        if ("${{ matrix.aws-xray-sdk-version }}" -ne "<existing>" ) {
          poetry add aws_xray_sdk="${{ matrix.aws-xray-sdk-version }}"
        }
        if ("${{ matrix.fastapi-version }}" -ne "<existing>" ) {
          poetry add fastapi="${{ matrix.fastapi-version }}"
        }
        if ("${{ matrix.aiohttp-version }}" -ne "<existing>" ) {
          poetry add aiohttp="${{ matrix.aiohttp-version }}"
        }
    - name: Test
      id: pytest
      run: |
        poetry run pytest tests --junit-xml=build/test-results/pytest-main.xml
