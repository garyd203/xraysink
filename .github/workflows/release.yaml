---
# TODO tweak github token permissions
# TODO pin action versions to SHA

name: Release

# The release workflow should only be run sequentially
concurrency: release

env:
  BUMPVERSION_VERSION: 1.0.1
  POETRY_VERSION: 1.1.12
  # Python version used to build the library
  PYTHON_BUILD_VERSION: 3.6

"on":
  workflow_dispatch

jobs:
  check-branch:
    name: "Check For 'master'"
    runs-on: ubuntu-latest
    steps:
      - name: Abort release against non-master
        if: github.ref != 'refs/heads/master'
        run: |
          echo "Release should only be against master, not '${GITHUB_REF}'"
          exit 1

  version-stamp:
    name: Version Stamp
    # We push the git tag release here before we do the actual pypi publish. If the publish step
    # fails, it doesn't really matter if git contains a phantom release
    needs:
      - check-branch
    runs-on: ubuntu-latest
    outputs:
      release-ref: ${{ steps.export-git-ref.outputs.release-ref }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref || github.ref }}
      - uses: snow-actions/git-config-user@v1.0.0
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_BUILD_VERSION }}
      - name: Install bump2version
        run: |
          pip install bump2version==${{ env.BUMPVERSION_VERSION }}
      - name: Bump version
        run: |
          bumpversion prerelease --verbose --commit --tag
      - name: Check non-beta version
        run: |
          # Verify this is not a beta/RC version
          poetry version --short | grep "$[0-9]+[.][0-9]+[.][0-9]+$"
      - name: Push to git
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.PUSH_TOKEN_TO_GITHUB }}
          branch: ${{ github.head_ref || github.ref }}
          tags: true
      - name: Export stamped git ref
        id: export-git-ref
        run: |
          NEW_GIT_SHA=$(git rev-parse HEAD)
          echo "::set-output name=release-ref::$NEW_GIT_SHA"

  test-source:
    # FIXME run tests again. need a reusbale workflow
    # TODO maybe only a subset of tests? in theory master is already well-tested
    name: Test
    needs:
      - version-stamp
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.version-stamp.outputs.release-ref }}
      - name: FIXME - need to run actual tests
        run: |
          echo FIXME

  build:
    name: Build Library
    needs:
      - version-stamp
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.version-stamp.outputs.release-ref }}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_BUILD_VERSION }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@7044c9c69e0265717d52471f66033b8d0e2a69ff  # v2.1.4
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: Build wheel etc.
        run: |
          poetry build
          ls -l dist
      - name: Upload artifacts for publish
        uses: actions/upload-artifact@v3
        with:
          name: poetry-build
          path: ./dist/xraysink-*

  test-build:
    name: Test Build Artifact
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Download built artifacts
        uses: actions/download-artifact@v3
        with:
          name: poetry-build
          path: dist
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_BUILD_VERSION }}
      - name: Install locally built wheel
        run: |
          pip install *.whl
        working-directory: dist
      - name: Smoke Test
        shell: python
        run: |
          from xraysink.config import set_xray_log_group
          set_xray_log_group("/xraysink/example")

  publish:
    name: Publish Library
    needs:
      - build
      - test-build
      - test-source
    runs-on: ubuntu-latest
    environment: pypi-live
    outputs:
      release-version: ${{ steps.export-version.outputs.release-version }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.version-stamp.outputs.release-ref }}
      - name: Download built artifacts
        uses: actions/download-artifact@v3
        with:
          name: poetry-build
          path: dist
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_BUILD_VERSION }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@7044c9c69e0265717d52471f66033b8d0e2a69ff  # v2.1.4
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: Publish wheel etc.
        run: |
          poetry publish -u __token__ -p ${{ secrets.PYPI_TOKEN }} --no-interaction
      - name: Export published version
        id: export-version
        run: |
          PYPI_VERSION=$(ls -l dist/*.tar.gz | tail -n 1 | sed -r s,"^.*-(.+)\.tar\.gz$","\1",)
          echo "Published xraysink v${PYPI_VERSION} to PyPI"
          echo "::set-output name=release-version::$PYPI_VERSION"

  bump-to-prerelease:
    name: Setup Next Release
    # We do this immediately after the version-bump for releasing. All the other steps use a
    # specific git SHA, so it won't impact them. And if something else fails we want this step
    # to run regardless
    needs:
      - version-stamp
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref || github.ref }}
      - uses: snow-actions/git-config-user@v1.0.0
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_BUILD_VERSION }}
      - name: Install bump2version
        run: |
          pip install bump2version==${{ env.BUMPVERSION_VERSION }}
      - name: Bump version
        run: |
          bumpversion patch --verbose --commit
      - name: Push to git
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.PUSH_TOKEN_TO_GITHUB }}
          branch: ${{ github.head_ref || github.ref }}
          tags: true

  test-release:
    name: Test Published Artifact (${{ matrix.os-family }})
    needs:
      - publish
    runs-on: ${{ format('{0}-latest', matrix.os-family) }}
    strategy:
      matrix:
        os-family: [ "ubuntu", "windows", "macos" ]
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install Build wheel
        run: |
          pip install xraysink==${{ needs.publish.outputs.release-version }}
      - name: Smoke Test
        shell: python
        # TODO check __version__ in published file
        run: |
          from xraysink.config import set_xray_log_group
          set_xray_log_group("/xraysink/example")
